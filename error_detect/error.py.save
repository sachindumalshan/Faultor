# Import library modules that need to get system information
import psutil
import platform
import os
import subprocess
import time
import logging
from logging.handlers import TimedRotatingFileHandler
from datetime import datetime

DEVICE_ID = "RBPi0001"
interval = 10

# Create a logger
logger = logging.getLogger('MyLoggger')
logger.setLevel(logging.DEBUG)

# Creates a TimedRotatingFileHandler
handler = TimedRotatingFileHandler(
	"my_logs.log",
	when="midnight",
	interval=1,
	backupCount=7)

formatter = logging.Formatter('%(ascstime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)

logger.addHandler(handler)

# Scale bytes to its proper format
# e.g: 1253656 => '1.20MB' ,1253656678 => '1.17GB'
def get_size(bytes, suffix="B"):
    factor = 1024
    for unit in ["", "K", "M", "G", "T", "P"]:
        if bytes < factor:
            return f"{bytes:.2f}{unit}{suffix}"
        bytes /= factor

# Boot Time
def boot_time():
    boot_time_timestamp = psutil.boot_time()
    bt = datetime.fromtimestamp(boot_time_timestamp)
    print(f"Boot Time: {bt.year}/{bt.month}/{bt.day} {bt.hour}:{bt.minute}:{bt.second}")
    logger.info(f"Boot Time: {bt.year}/{bt.month}/{bt.day} {bt.hour}:{bt.minute}:{bt.second}")

# Device Details
def device_detail():
    uname = platform.uname()
    print(f"System: {uname.system}")
    print(f"Device ID: {DEVICE_ID}")
    print(f"Node Name: {uname.node}")
    print(f"Machine: {uname.machine}")

# Device cpu, disk, memory usage
def cdm_usage():
    # CPU information
    print(f"Total CPU Usage: {psutil.cpu_percent()}%")
    # Memory Information
    svmem = psutil.virtual_memory()
    print(f"Percentage: {svmem.percent}%")
    # Disk Information
    print("Partitions and Usage:")
    # get all disk partitions
    partitions = psutil.disk_partitions()
    for partition in partitions:
        print(f"=== Device: {partition.device} ===")
        try:
            partition_usage = psutil.disk_usage(partition.mountpoint)
        except PermissionError:
            continue
        print(f"  Percentage: {partition_usage.percent}%")


def network_connectivity():
    # Network connectivity information
    interfaces = psutil.net_if_stats()
    ethernet = interfaces.get('eth0')
    if ethernet and ethernet.isup:
        print("Ethernet connected")
    else:
        print("Ethernet not connected")

    # Internet connectivity information
    hostname = '8.8.8.8'
    response = os.system("ping -c 1 " + hostname)
    if response == 0:
        print("Internet connected")
    else:
        print("Internet not connected")

# Check service file running or not
def check_service_status(service_name):
    try:
        result = subprocess.run(["systemctl","is-active",service_name],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE,
                                text=True
        )
        status = result.stdout.strip()
        if status == "active":
            print(f"{service_name} is running")
        else:
            print(f"{service_name} is NOT running")
    except Exception as e:
        print(f"Error checking status for {service_name}: {e}")

# Main function
def main():
    while True:
        boot_time()
        device_detail()
        cdm_usage()
        network_connectivity()
        services = ["dummy_service1","dummy_service2"]
        for service in services:
            check_service_status(service)
        time.sleep(interval)
    
main()
    
    
